struct node*
grandParent(struct node*)
{
	if ((n != NULL) && (n->parent != NULL))
		return n->parent->parent;
	else
		return NULL;
}

uncle(struct node*)
{
	struct node *g=grandParent(n);
	if (g == NULL)
		return NULL;
	if (n->parent == g->left)
		return g->right();
	else	
		return g->left();
}

void insert_case1(struct node*)
{
	if(n->parent == NULL)
		n->color = BLACK;
	else 
		insert_case2(n);
}

void insert_case2(struct node*)
{
	if(n->parent->color == BLACK)
		return;
	else	
		insert_case3(n);
}

void insert_case3(struct node*)
{
	struct node *u = uncle(n), *g;
	if((u != NULL) && (u->color == RED)){
		n->parent->color = BLACK;
		u->color = BLACK;
		g = grandParent(n);
		g->color=RED;
		insert_case1(g);
	}else{
		insert_case4(n);
}

void insert_case4(struct node*)
{
	struct node *g=grandParent(n);
	
	if((n == n->parent->right) && (n->parent == g->left)){
		rotateleft(n->parent);
		n = n->left;
	} else if ((n == n->parent->left) && n->parent == g->right)){
		rotateright(n->parent);
		n=n->right;
	}
	insert_case5(n);
}

void insert_case5(struct node*)
{
	struct node *g=grandParent(n);
	
	n->parent->color = BLACK;
	g->color = RED;
	if((n == n->parent->left) && (n->parent == g->left)){
		rotateright(g);
	}else{
		rotateleft(g);
	}
}

brother(struct node* n)
{
	if(n == n->parent->left)
		return n->parent->right;
	else
		return n->parent->left;
}

void replace_node(struct node *, *child)
{
	child->parent = n->parent;
	if(n == n->parent->left){
		n->parent->left = child;
	}else{
		n->parent->right = child;
	}
}

void delete_child(struct node *n)
{
	struct node *child = is_leaf(n->right) ? n->left: n->right;
	replace_node(n, child);
	if(n->color == BLACK){
		if(child->color == RED)
			child->color = BLACK;
		else
			delete_case2(child);
	}
	free(n)
}

void delete_case2(struct node *n)
{
	struct node *b = brother(n);
	
	if (b->color == RED){
		n->parent->color = RED;
		b->color = BLACK;
		if (n == n->parent->left)
			rotateleft(n->parent);
		else 
			rotateright(n->parent);
	}
	delete_case3(n);
}

void delete_case3(struct node *n)
{
	struct node *b = brother(n);
	
	if((n->parent->color == BLACK) &&
		(b->color == BLACK) &&
		(b->color->left == BLACK) &&
		(b->color->right == BLACK))
		{
			s->color = RED;
			delete_case2(n->parent);
		}else delete_case4(n);
}

void delete_case4(struct node *n)
{
	struct node *b = brother(n);
	
	if((n->parent->color == RED) &&
		(b->color == BLACK) &&
		(b->color->left == BLACK) &&
		(b->color->right == BLACK))	
	{
		b->color = RED;
		n->parent = BLACK;
	}else delete_case5(n);
}
		
void delete_case5(struct node *n)
{
	struct node *b = brother(n);
	if(b->color == BLACK){
		if((n == n->parent->left) && 
			(b->right->color == BLACK) &&
			(b->left->color == RED))
		{
			b->color = RED;
			b->left->color = BLACK;
			rotateright(b);
		}else if(
			(n == n->parent->right) && 
			(b->left->color == BLACK) &&
			(b->right>color == RED))
		{
			b->color = RED;
			b->right->color = BLACK;
			rotateleft(b);
		}
	}
	delete_case6(n);
}

void delete_case6(struct node *n)
{
	struct node *b = brother(n);
	
	b->color = n->parent->color;
	n->parent->color = BLACK;
	
	if(n == n->parent->left){
		b->right->color = BLACK;
		rotateleft(n->parent);
	{else{
		b->left->color = BLACK;
		rotateright(n->parent);
	}
}